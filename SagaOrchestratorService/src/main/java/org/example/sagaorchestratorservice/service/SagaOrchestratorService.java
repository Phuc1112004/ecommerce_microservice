package org.example.sagaorchestratorservice.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.common.client.BookClient;
import org.example.common.client.OrderClient;
import org.example.common.client.PaymentClient;
import org.example.common.dto.BookInfoDTO;
import org.example.common.dto.OrderInfoDTO;
import org.springframework.stereotype.Service;

@Slf4j
@Service
@RequiredArgsConstructor
public class SagaOrchestratorService {

    private final OrderClient orderClient;
    private final PaymentClient paymentClient;
    private final BookClient bookClient;

    public void processOrder(Long orderId) {
        log.info("üß≠ Start Saga for order {}", orderId);

        OrderInfoDTO order = orderClient.getOrderById(orderId);
        if (order == null) {
            log.error("‚ùå Order {} not found!", orderId);
            return;
        }

        try {
            // B1: Thanh to√°n
            log.info("üí≥ Processing payment for order {}", orderId);
            paymentClient.updatePaymentByOrder(orderId, "SUCCESS");

            // B2: Tr·ª´ stock
            log.info("üì¶ Updating stock for ordered items...");
            // Gi·∫£ l·∫≠p: l·∫•y bookId v√† quantity t·ª´ order (demo b·∫°n c√≥ th·ªÉ fix c·ª©ng)
            Long bookId = 1L;
            bookClient.updateStockQuantity(bookId, -1);

            // B3: Ho√†n t·∫•t
            orderClient.updateOrderStatus(orderId, "COMPLETED");
            log.info("‚úÖ Saga success for order {}", orderId);

        } catch (Exception e) {
            log.error("‚ö†Ô∏è Saga failed for order {}, rolling back...", orderId);

            // Rollback logic
            paymentClient.updatePaymentByOrder(orderId, "FAILED");
            orderClient.updateOrderStatus(orderId, "CANCELLED");
            // T√πy ch·ªçn: bookClient.updateStockQuantity(bookId, +1);
        }
    }
}